spring.application.name=barberSpa
#puerto por defecto 8080
server.port=63106
#conexion a base de datos
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/bmspa
spring.datasource.username=root
spring.datasource.password=
#propiedades de JPA, cuando no estan las tablas en db las crea
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.main.allow-circular-references=true
#configuracion pasarela de pagos MercadoPago
mercadopago.public.key=TEST-691b031d-dfc9-4995-8123-72fd7866d738
mercadopago.access.token=TEST-5344525936912253-040400-e45670348c0aa57e49a276ac85b28918-1240672682
mercadopago.success.url=http://localhost:63106/success
mercadopago.failure.url=http://localhost:63106/failure
mercadopago.pending.url=http://localhost:63106/pending
#configuracion pasarela de pagos PayPal
paypal.client.id=Af2aprPDlFQMpXUr6Ak8e2bzlWjL_QctjCzKvuiyDkQYY3QTLwYXOgusOv63mxqr1vPQ8kh6cE0XTYOP
paypal.client.secret=EG5icBw6Rw1eIpWsxjQOc17FwvqpXIt9Wqgr2nwHRAWG_KjxqweKxKt6Lr0cFpDPTUH9zyaOMerLwp7z
paypal.mode=sandbox
paypal.success.url=http://localhost:63106/paypal/success
paypal.cancel.url=http://localhost:63106/paypal/cancel

# Configuración de OAuth2 para Google
spring.security.oauth2.client.registration.google.client-id=885338402317-e13lvua9og3ovj9osg26ok8fjmq13r0q.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:63106/login/oauth2/code/google

# Configuración de OAuth2 para Facebook
spring.security.oauth2.client.registration.facebook.client-id=1463184257992924
spring.security.oauth2.client.registration.facebook.client-secret=70f5f9966aeca2fee79007fa1c963270
spring.security.oauth2.client.registration.facebook.scope=email,public_profile

spring.security.oauth2.client.registration.github.client-id=tu-client-id-de-github
spring.security.oauth2.client.registration.github.client-secret=tu-client-secret-de-github
spring.security.oauth2.client.registration.github.scope=user:email,read:user

spring.security.oauth2.client.registration.linkedin.client-id=tu-client-id-de-linkedin
spring.security.oauth2.client.registration.linkedin.client-secret=tu-client-secret-de-linkedin
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile,r_emailaddress
spring.security.oauth2.client.registration.linkedin.client-name=LinkedIn
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id

# Habilitar logging detallado para spring security y oauth2
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.com.sena.barberspa=DEBUG